# -*- coding: utf-8 -*-

from pygments.style import Style
from pygments.token import Keyword, Comment, String, Error, Number, Operator, Token

import re

# Pygments only allow colors in `hex` form: `#rrggbb` for styles. And emit
# extended ASCII escape sequence.
#
# Though, we want to allow (simple) ANSI sequences in the formatter output, so
# that users have IPython color scheme that follow the specific settings of
# their terminal emulator, And this only for some themes (in particular Linux
# and LightBG)
#
# Thus we will encode which (simple) ANSI escape sequence we want in an `hex`
# form, that pygments will transform in a `\x1b[38;5;xxx;01m` extended ansi
# sequence with x in [0:256]. Just before formatting, we will intercept these
# specific values of `xxx` and replace the extended color escape sequence
# `[38;5;xxx;01m` by the simple ANSI sequence `[3x;0ym`.

# for that we first need to generate at least 16 hex colors that will match
# to 16 **differents** extended ansi escape sequence: `[38;5;xxx;01m`

from pygments.formatters import Terminal256Formatter
def _gen():
    """
    This generate the mapping from `xxx` to `#rrggbb`. See comment above.
    """
    TF = Terminal256Formatter()
    d = {}
    for i in range(12):
        g = 20*i
        for j in range(12):
            b = 20*j
            res = TF._closest_color(0,g,b)
            d[res] = '#00'+hex(g)[2:].zfill(2)+hex(b)[2:].zfill(2)
            if len(d) >= 16:
                return d

_num_to_hex = _gen()

# We now want to map names like `ansired`, `ansibrightgreen` to their `xxx` and `#rrggbb` correspondence
# we generate `num_to_ansicode` at the same time as we will use it later. 
# The Light/Bright/Dark/... modifier is not well chose as the ;01; modifier can either be darker, 
# bolder, lighter, underlined depending on your terminal emulator configuration. 

ansi_colors = ('black', 'red', 'green','yellow','blue', 'magenta', 'cyan', 'white')

def _gen_name_to_num(num_to_hex):
    name_to_num = {}
    num_to_ansicode = {}
    nums = iter(num_to_hex.keys())
    for i,c in enumerate(ansi_colors):
        for bright in ['','bright']:
            num = next(nums)
            name_to_num['ansi'+bright+c] = num
            # TODO: we might not want the \001, \002 on each side. 
            num_to_ansicode[num] = '\x01\x1b[%s;%sm\x02' %(30+i, '01' if bright else '')
    return name_to_num,num_to_ansicode

name_to_num, num_to_ansicode = _gen_name_to_num(_num_to_hex)

# name_to_hex will be useful later too, we will use that to actually create Pygments themes.
name_to_hex = {}
for name,num in name_to_num.items():
    name_to_hex[name] = _num_to_hex[num]
    globals()[name] = _num_to_hex[num]

# as well as name_to_ansicode
name_to_ansicode = {}
for name, num in name_to_num.items():
    name_to_ansicode[name] = num_to_ansicode[num]

# TODO: reinsert the \001\002 oat the right place.
R = re.compile('((\x01)?\x1b\[38;5;(\d+)(;01)?m)')

def ansify(seq):
    """Take an extended ansi escape sequence generated by Terminal256Formatter and normalise it."""
    try:
        g = R.search(seq)
        if g:
            return num_to_ansicode[int(g.group(3))]
        else:
            return seq
    except KeyError:
        return seq

class AnsiStyle(Style):pass

class NoColorStyle(Style):
    style = {'':''}

class LightBGStyle(AnsiStyle):
    """
    The default style (inspired by Emacs 22).
    """

    use_ansi=True

    styles = {
        Token.InPrompt.Number:     ansiblue, 
        Token.InPrompt.Color :     ansiblue, 
        Token.OutPrompt.Number:    ansired,
        Token.OutPrompt.Color:     ansired,
        Comment:                   ansired,
        Keyword:                   ansigreen,
        Operator:                  ansiblue,
        String:                    ansiblue,
        Number:                    ansicyan,
        Error:                     ansired
    }

class LinuxStyle(AnsiStyle):

    use_ansi=True
    
    styles = {
        Token.InPrompt.Number:     ansibrightgreen,
        Token.InPrompt.Color :     ansigreen, 
        Token.OutPrompt.Number:    ansibrightred,
        Token.OutPrompt.Color:     ansired,
        Comment:                   ansibrightred,
        Keyword:                   ansibrightgreen,
        Operator:                  ansiyellow,
        String:                    ansibrightblue,
        Number:                    ansibrightcyan,
        Error:                     ansired
    }
