# -*- coding: utf-8 -*-

from pygments.style import Style
from pygments.token import Keyword, Comment, String, Error, \
     Number, Operator, Token

import re
from collections import defaultdict


# Pygments only allow colors in the form #rrggbb in styles.
#
# Though we want to allow ANSI sequences in the formatter output, so that users
# have IPython color scheme that follow the specific settings of their teminal
# emulator.
#
# Thus we will encode which ANSI escape sequence we want in the form 
# of #rrggbb, that pygments will transform in a `[38;5;xxx;01m` with x in [0:256].
# just before formatting, we will intercept these specific values of `xxx` and replace the
# true color escape sequence `[38;5;xxx;01m` by the ANSI code `[3x;0ym`.

# for that we first need to generate at least 16 `#rrggbb` colors that will mat
# to 16 **differents** [38;5;xxx;01m

from pygments.formatters import Terminal256Formatter
def _gen():
    """
    This generate the mapping from `xxx` to `#rrggbb`. See comment above.
    """
    TF = Terminal256Formatter()
    d = {}
    for i in range(25):
        g=10*i
        for j in range(25):
            b =10*j
            res = TF._closest_color(0,g,b)
            d[res] = '#00'+hex(g)[2:].zfill(2)+hex(b)[2:].zfill(2)
            if len(d) > 16:
                return d

_num_to_hex = _gen()

# We now want to map names like `ansired`, `ansibrightgreen` to their `xxx` and `#rrggbb` correspondance
# we generate `num_to_ansicode` at the same time as we will use it later. 

def _gen_name_to_num(num_to_hex):
    name_to_num = {}
    num_to_ansicode = {}
    clrs = ['black', 'red', 'green','yellow','blue', 'magenta', 'cyan', 'white']
    nums = iter(num_to_hex.keys())
    for i,c in enumerate(clrs):
        for bright in ['','bright']:
            num = next(nums)
            name_to_num['ansi'+bright+c] = num
            num_to_ansicode[num] = '\x01\x1b[%s;%sm\x02' %(30+i, '01' if bright else '')
    return name_to_num,num_to_ansicode

name_to_num, num_to_ansicode = _gen_name_to_num(_num_to_hex)

# name_to_hex will be useful later too.
name_to_hex = {}
for name,num in name_to_num.items():
    name_to_hex[name] = _num_to_hex[num]

def ansi(color):
    return name_to_hex['ansi'+color]

# as well as name_to_ansicode
name_to_ansicode = {}
for name, num in name_to_num.items():
    name_to_ansicode[name] = num_to_ansicode[num]

# TODO: reinsert the \01\02
R = re.compile('((\x01)?\x1b\[38;5;(\d+)(;01)?m)')

def ansify(seq):
    """Take an extended ansi escape sequence generated by Terminal256Formatter and normalise it"""
    try:
        g = R.search(seq)
        if g:
            #import pdb; pdb.set_trace()
            return num_to_ansicode[int(g.group(3))]
        else:
            return seq
    except:
        return seq


class NoColorStyle(Style):

    background_color = ''
    default_style = '' 

    style = defaultdict(lambda:'bold #0000BB', {'':''})

class LightBGStyle(Style):
    """
    The default style (inspired by Emacs 22).
    """

    use_ansi=True

    styles = {
        Token.InPrompt.Number:     ansi('blue'), 
        Token.InPrompt.Color :     ansi('blue'), 
        Token.OutPrompt.Number:    ansi('red'),
        Token.OutPrompt.Color:     ansi('red'),
        Comment:                   ansi('red'),
        Keyword:                   ansi('green'),
        Operator:                  ansi('blue'),
        String:                    ansi('blue'),
        Number:                    ansi('cyan'),
        Error:                     ansi("red")
    }

class LinuxStyle(Style):

    use_ansi=True
    
    styles = {
        Token.InPrompt.Number:     ansi('brightgreen'), 
        Token.InPrompt.Color :     ansi('green'), 
        Token.OutPrompt.Number:    ansi('brightred'),
        Token.OutPrompt.Color:     ansi('red'),
        Comment:                   ansi('brightred'),
        Keyword:                   ansi('brightgreen'),
        Operator:                  ansi('yellow'),
        String:                    ansi('brightblue'),
        Number:                    ansi('brightcyan'),
        Error:                     ansi("red")
    }
